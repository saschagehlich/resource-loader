{"version":3,"sources":["../../../src/middlewares/parsing/blob.js"],"names":["blobMiddlewareFactory","root","window","global","Url","URL","webkitURL","blobMiddleware","resource","next","data","xhr","xhrType","XHR_RESPONSE_TYPE","BLOB","Blob","type","getResponseHeader","indexOf","Image","src","encodeBinary","responseText","TYPE","IMAGE","onload","createObjectURL","blob","revokeObjectURL"],"mappings":";;;QAOgBA,qB,GAAAA,qB;;AAPhB;;;;AACA;;;;;;AAEA,IAAMC,OAAO,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,MAAhC,GAAyCD,MAAtD;AACA,IAAME,MAAMH,KAAKI,GAAL,IAAYJ,KAAKK,SAA7B;;AAEA;AACO,SAASN,qBAAT,GAAiC;AACpC,WAAO,SAASO,cAAT,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;AAC3C,YAAI,CAACD,SAASE,IAAd,EAAoB;AAChBD;;AAEA;AACH;;AAED;AACA,YAAID,SAASG,GAAT,IAAgBH,SAASI,OAAT,KAAqB,mBAASC,iBAAT,CAA2BC,IAApE,EAA0E;AACtE;AACA,gBAAI,CAACZ,OAAOa,IAAR,IAAgB,OAAOP,SAASE,IAAhB,KAAyB,QAA7C,EAAuD;AACnD,oBAAMM,OAAOR,SAASG,GAAT,CAAaM,iBAAb,CAA+B,cAA/B,CAAb;;AAEA;AACA,oBAAID,QAAQA,KAAKE,OAAL,CAAa,OAAb,MAA0B,CAAtC,EAAyC;AACrCV,6BAASE,IAAT,GAAgB,IAAIS,KAAJ,EAAhB;AACAX,6BAASE,IAAT,CAAcU,GAAd,aAA4BJ,IAA5B,gBAA2C,YAAIK,YAAJ,CAAiBb,SAASG,GAAT,CAAaW,YAA9B,CAA3C;;AAEAd,6BAASQ,IAAT,GAAgB,mBAASO,IAAT,CAAcC,KAA9B;;AAEA;AACAhB,6BAASE,IAAT,CAAce,MAAd,GAAuB,YAAM;AACzBjB,iCAASE,IAAT,CAAce,MAAd,GAAuB,IAAvB;;AAEAhB;AACH,qBAJD;;AAMA;AACA;AACH;AACJ;AACD;AArBA,iBAsBK,IAAID,SAASE,IAAT,CAAcM,IAAd,CAAmBE,OAAnB,CAA2B,OAA3B,MAAwC,CAA5C,EAA+C;AAChD,wBAAME,MAAMhB,IAAIsB,eAAJ,CAAoBlB,SAASE,IAA7B,CAAZ;;AAEAF,6BAASmB,IAAT,GAAgBnB,SAASE,IAAzB;AACAF,6BAASE,IAAT,GAAgB,IAAIS,KAAJ,EAAhB;AACAX,6BAASE,IAAT,CAAcU,GAAd,GAAoBA,GAApB;;AAEAZ,6BAASQ,IAAT,GAAgB,mBAASO,IAAT,CAAcC,KAA9B;;AAEA;AACA;AACAhB,6BAASE,IAAT,CAAce,MAAd,GAAuB,YAAM;AACzBrB,4BAAIwB,eAAJ,CAAoBR,GAApB;AACAZ,iCAASE,IAAT,CAAce,MAAd,GAAuB,IAAvB;;AAEAhB;AACH,qBALD;;AAOA;AACA;AACH;AACJ;;AAEDA;AACH,KAxDD;AAyDH","file":"blob.js","sourcesContent":["import Resource from '../../Resource';\nimport b64 from '../../b64';\n\nconst root = typeof window === 'undefined' ? global : window;\nconst Url = root.URL || root.webkitURL;\n\n// a middleware for transforming XHR loaded Blobs into more useful objects\nexport function blobMiddlewareFactory() {\n    return function blobMiddleware(resource, next) {\n        if (!resource.data) {\n            next();\n\n            return;\n        }\n\n        // if this was an XHR load of a blob\n        if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {\n            // if there is no blob support we probably got a binary string back\n            if (!window.Blob || typeof resource.data === 'string') {\n                const type = resource.xhr.getResponseHeader('content-type');\n\n                // this is an image, convert the binary string into a data url\n                if (type && type.indexOf('image') === 0) {\n                    resource.data = new Image();\n                    resource.data.src = `data:${type};base64,${b64.encodeBinary(resource.xhr.responseText)}`;\n\n                    resource.type = Resource.TYPE.IMAGE;\n\n                    // wait until the image loads and then callback\n                    resource.data.onload = () => {\n                        resource.data.onload = null;\n\n                        next();\n                    };\n\n                    // next will be called on load\n                    return;\n                }\n            }\n            // if content type says this is an image, then we should transform the blob into an Image object\n            else if (resource.data.type.indexOf('image') === 0) {\n                const src = Url.createObjectURL(resource.data);\n\n                resource.blob = resource.data;\n                resource.data = new Image();\n                resource.data.src = src;\n\n                resource.type = Resource.TYPE.IMAGE;\n\n                // cleanup the no longer used blob after the image loads\n                // TODO: Is this correct? Will the image be invalid after revoking?\n                resource.data.onload = () => {\n                    Url.revokeObjectURL(src);\n                    resource.data.onload = null;\n\n                    next();\n                };\n\n                // next will be called on load.\n                return;\n            }\n        }\n\n        next();\n    };\n}\n"]}